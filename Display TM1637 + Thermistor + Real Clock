

// Segurte o botao para alternar

#include <TM1637Display.h>
#include "RTClib.h"  
#include <Thermistor.h>
 
RTC_DS3231 rtc;


TM1637Display display(8,9); // define os pinos 2 com CLK e 3 com DIO

const byte pinBut =12;
const byte pinPot = A0;

Thermistor temp(1); // termistor conectado na porta A1 (cria o objeto)

byte controle = 0;
uint32_t temporizador = 0;

float displayTemp;

//      -         A
//    |   |     F   B
//      -         G
//    |   |     E   C
//      -         D
const uint8_t DEGREEC[] = {
   0x0, 0x0,
   SEG_A | SEG_B | SEG_G | SEG_F,    // Degree Symbol
   SEG_A | SEG_F | SEG_E | SEG_D,    // C
   };

const uint8_t DEGREEF[] = {
   0x0, 0x0,
   SEG_A | SEG_B | SEG_G | SEG_F,    // Degree Symbol
   SEG_A | SEG_F | SEG_E | SEG_G,    // F
   };   

 
void setup(){
  pinMode(pinBut, INPUT_PULLUP);
  Serial.begin(9600); 
  display.setBrightness(7);
  delay(3000);  
  // Check if RTC is connected correctly  
  if (! rtc.begin()) {  
   Serial.println("Couldn't find RTC");  
   while (1);  
  }  
  // Check if the RTC lost power and if so, set the time:  
  if (rtc.lostPower()) {  
   Serial.println("RTC lost power, lets set the time!");  
   // The following line sets the RTC to the date & time this sketch was compiled:  
   rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));  
   // This line sets the RTC with an explicit date & time, for example to set  
   // January 21, 2014 at 3am you would call:  
   //rtc.adjust(DateTime(2014, 1, 21, 3, 0, 0));  
  }  
  // Set the display brightness (0-7):  
  display.setBrightness(5);  
  // Clear the display:  
  display.clear();  

}
 
void loop() {
  brilho(); // ajusta brilho dos leds do display
 DateTime now = rtc.now();  
  // Create time format to display:  
  int displaytime = (now.hour() * 100) + now.minute();  
  // Print displaytime to the Serial Monitor  
  Serial.println(displaytime);  
  // Display the current time in 24 hour format with leading zeros enabled and a center colon:

  float temperature = temp.getTemp(); //calcula a temperatura
  
  float tempC = temperature; // Celsius
  float tempF = ((temperature * 1.8)+32); // Converte para Fahrenheit

  // verifica se o botão foi pressionado e muda o controle
  if(!digitalRead(pinBut)) {
    controle = !controle;
    while (!digitalRead(pinBut)) {  }  //esperera soltar o botão
    delay(50);
  }

  switch (controle) {
    case 0:
      displayTemp = tempC;
      showTemperature(0);
      break;
    case 1:
      display.showNumberDecEx(displaytime, 0b11100000, true);
      delay(1000);  
      display.showNumberDec(displaytime, true);  
      delay(1000); 
      break;
  }
}  
      
void showTemperature(byte x) {
   if ((millis() - temporizador) >=1000) {
      Serial.println(displayTemp);
      if (x==0) {
         display.setSegments(DEGREEC); //Exibe o valor da variável 
      } else {
         display.setSegments(DEGREEF); //Exibe o valor da variável   
      }
      display.showNumberDec(displayTemp,false,2,0);
      temporizador = millis();
  }
}

void brilho() {
  // Lê valor do potenciômetro (0 a 1023)
  int valor = analogRead(pinPot);
  // Converte valor do potenciêmtro para valor de 0 a 7
  int potVal = map(valor, 0, 1023, 0, 7);
  // Ajusta o brilho dos leds (segmentos) entre 0 e 7
  display.setBrightness(potVal);
}
